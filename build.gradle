buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'io.github.zebalu:teavm-gradle-plugin:1.0.0'
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'io.github.zebalu.teavm-gradle-plugin'

import org.apache.tools.ant.filters.*

group = 'itdelatrisu'
version = '0.16.1'

mainClassName = 'itdelatrisu.opsu.Opsu'
buildDir = new File(rootProject.projectDir, "build/")

def useXDG = 'false'
if (hasProperty('XDG')) {
	useXDG = XDG
}

def excludeFFmpeg = false
if (hasProperty('excludeFFmpeg')) {
	excludeFFmpeg = true
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
	main {
		java {
			srcDir 'src'
		}
	}
}

repositories {
	mavenCentral()
	maven {
		url "$rootProject.projectDir/repo"
	}
}

dependencies {
	compile('org.lwjgl.lwjgl:lwjgl:2.9.4-SNAPSHOT') {
		exclude group: 'net.java.jinput', module: 'jinput'
	}
	compile('org.slick2d:slick2d-core:1.0.2') {
		exclude group: 'org.lwjgl.lwjgl', module: 'lwjgl'
		exclude group: 'org.jcraft', module: 'jorbis'
		exclude group: 'javax.jnlp', module: 'jnlp-api'
	}
	compile 'net.lingala.zip4j:zip4j:1.3.2'
	compile 'com.googlecode.soundlibs:jlayer:1.0.1.4'
	compile('com.googlecode.soundlibs:mp3spi:1.9.5.4') {
		exclude group: 'com.googlecode.soundlibs', module: 'tritonus-share'
	}
	compile 'com.googlecode.soundlibs:tritonus-all:0.3.7.2'
	compile 'org.xerial:sqlite-jdbc:3.15.1'
	compile 'org.json:json:20160810'
	compile 'net.java.dev.jna:jna:4.2.2'
	compile 'net.java.dev.jna:jna-platform:4.2.2'
	compile 'org.apache.maven:maven-artifact:3.3.3'
	compile 'org.tukaani:xz:1.6'
	compile 'net.indiespot:media:0.8.9'
	implementation 'org.teavm:teavm-platform:0.6.1'
	implementation('org.teavm:teavm-classlib:0.6.1') {
		exclude group: 'com.google.code.gson', module: 'gson'
	}
}

def nativePlatforms = ['windows', 'linux', 'osx', 'all']
nativePlatforms.each { platform -> //noinspection GroovyAssignabilityCheck
	task "${platform}Natives" {
		def outputDir = "${buildDir}/natives/"
		inputs.files(configurations.compile)
		outputs.dir(outputDir)
		doLast {
			copy {
				def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
						.findAll { it.classifier == "natives-$platform" }
				artifacts.each {
					from zipTree(it.file)
				}
				into outputDir
			}
		}
	}
}

processResources {
	from 'res'
	exclude '**/Thumbs.db'

	filesMatching('version') {
		expand(version: project.version, timestamp: new Date().format("yyyy-MM-dd HH:mm"))
	}
}

task unpackNatives {
	description "Copies native libraries to the build directory."
	dependsOn nativePlatforms.collect { "${it}Natives" }.findAll { tasks[it] }
}

jar {
	manifest {
		attributes 'Implementation-Title': 'opsu!',
				'Implementation-Version': version,
				'Main-Class': mainClassName,
				'Use-XDG': useXDG
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	baseName = "opsu"

	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude '**/Thumbs.db'
	if (excludeFFmpeg)
		exclude 'ffmpeg*'

	outputs.upToDateWhen { false }
}

run {
	dependsOn 'unpackNatives'
}

teavm {

	compileScopes = null;
	minifying = true;
	maxTopLevelNames = 10000;
	properties = null;
	debugInformationGenerated = false;
	sourceMapsGenerated = true;
	sourceFilesCopied = false;
	incremental = false;
	transformers = null;

	/** Where to save the result */
	targetDirectory = file("javascript");

	/** The directory to monitor to decide if compile is up-to-date or not */
	sourceDirectory = file("src");

	/** How to name the result file. */
	targetFileName = "classes.js";

	/** Which class holds your public static void main(Strin[] args) method */
	mainClass = 'net.lax1dude.eaglercraft.v1_8.internal.teavm.MainClass';

	/** This will be the name of your main method after compilation. */
	entryPointName = 'main';

	classesToPreserve = null;
	stopOnErrors = false;
	optimizationLevel = "ADVANCED"; //org.teavm.vm.TeaVMOptimizationLevel.SIMPLE;
	fastGlobalAnalysis = false;
	targetType = "JAVASCRIPT"; //org.teavm.tooling.TeaVMTargetType.JAVASCRIPT;
	cacheDirectory = null;
	wasmVersion = "V_0x1"; //org.teavm.backend.wasm.render.WasmBinaryVersion.V_0x1;
	minHeapSize = 4;
	maxHeapSize = 128;
	outOfProcess = false;
	processMemory = 512;
	longjmpSupported = true;
	heapDump = false;

	/** Add name of configurations here where to look for jarfiles. */
	includeJarsFrom = [];

	/** By default teavmc taskd epends on javaCompile task, unless this varaibale is true. */
	skipJavaCompile = false;
}
